
# graylog contains mongodb, opensearch, and graylog frontend
# networks:
#   enclave:
#     external: true
#     name: enclave
networks:
  # graylog:
  #   driver: overlay
  #   attachable: true
  #   driver_opts:
  #     encrypted: "true"
  #   ipam:
  #     config:
  #       - subnet: 192.168.28.0/24
  # graylog:
  #   name: graylog
  #   external: true
  enclave:
    name: enclave
    external: true

services:
  mongodb:
    # cannot run monogo:5 because my cpu's don't have avx support
    # 4.4.6 works.
    # this needs more work....
    # added swarm-dev-04, swarm-dev-05, swarm-dev-06 in vmware fusion on my mac desktops and laptops that have avx. 
    image: "mongo:5"

    # mongodb:mongodb uid:gid == 999:999, therefore:
    # ssh conf@prod-02
    # sudo mkdir -p /localfs/services/graylog/mongodb/data
    # sudo chown 999:999 /localfs/services/graylog/mongodb/data
    volumes:
      #- "/nfs/graylog/mongodb/data:/data/db"
      - "/localfs/services/graylog/mongodb/data:/data/db"
    restart: "on-failure"
    environment:
      # must be the same as GRAYLOG_PASSWORD_SECRET
      GRAYLOG_DATANODE_PASSWORD_SECRET: "h8wOr4JK24gT6PjqyopWxRoVAj3kttBqCazP9hGb28GhKI1Rxokg553VJOwdx3LKt35r4NcA0tMWIkDJ6qqZnwFrT4jjJiVK"
    deploy:
      replicas: 1
      placement:
        # specifically mongodb is on swarm-dev-05 because 04 and 05 have intel avx support.
        constraints: [node.labels.graylog_graylog == true]
    networks:
      - enclave
      # graylog:
      #   ipv4_address: 192.168.0.10/24


  opensearch:
    image: "opensearchproject/opensearch:2.4.0"
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "bootstrap.memory_lock=true"
      - "discovery.type=single-node"
      - "action.auto_create_index=false"
      - "plugins.security.ssl.http.enabled=false"
      - "plugins.security.disabled=true"
    ulimits:
      memlock:
        hard: -1
        soft: -1
      nofile:
        soft: 65536
        hard: 65536
    # ssh conf@prod-02
    # sudo mkdir -p /localfs/services/graylog/opensearch/data
    # sudo chown -R 1000:1000 /localfs/services/graylog/opensearch 
    volumes:
      # - "/nfs/graylog/opensearch/data:/usr/share/opensearch/data"
      - "/localfs/services/graylog/opensearch/data:/usr/share/opensearch/data:rw"
    restart: "on-failure"
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.graylog_graylog == true]
    networks:
      - enclave
      # graylog:
      #   ipv4_address: 192.168.0.11/24

  graylog:
    # image: graylog/graylog:6.1.5
    image: graylog/graylog:6.3.2
    # depends on is deprecated.
    # depends_on:
    #   opensearch:
    #     condition: "service_started"
    #   mongodb:
    #     condition: "service_started"
    #entrypoint: "/usr/bin/tini -- wait-for-it opensearch:9200 -- /docker-entrypoint.sh"
    entrypoint: "/docker-entrypoint.sh"
    # external_links:
    #    - proxy_proxy
    networks:
      - enclave
      # enclave:
      # graylog:
      #   ipv4_address: 192.168.0.12/24
    ports:
    #   - "5044:5044/tcp"   # beats
    #   - "5140:5140/udp"   # syslog
    #   - "5140:5140/tcp"   # syslog
    #   - "5555:5555/tcp"   # raw tcp
    #   - "5555:5555/udp"   # raw udp
    #   - "9000:9000/tcp"   # server api 
      - "12201:12201/udp" # gelf udp (we need this one exposed at the vip for the docker swarm nodes)
    #   - "13301:13301/tcp" # forwarder data
    #   - "13302:13302/tcp" # forwarder config
    # - Couldn't load configuration: Properties file /usr/share/graylog/data/config/graylog.conf doesn't exist!
    volumes:
      # need to chown -R 1100:1100 /localfs/services/graylog/data on swarm-dev-02 <- yes
      - "/localfs/services/graylog/data/data:/usr/share/graylog/data/data:rw"
      - "/localfs/services/graylog/data/journal:/usr/share/graylog/data/journal:rw"

      ### *** absolute P.O.S.!  the health_check.sh that's inside of the image has a race condition in it because it tries to curl itself before it's up
      ### *** and therefore takes itself out before it can start.
      ### *** i literally cannot believe how much forking time i've spent trying to unfork this.
      ### thank you this guy: https://community.graylog.org/t/graylog-6-2-docker-container-health-check-failing/35749/2
      # see the difference at rhel-dev-01:/localfs/services/graylog/health_check.sh vs health_check2.sh
      # so this healthcheck that i've put in is garbage and only does exit 0 to get a passing error code so that it will deploy.
      # TODO: just embed the curl command in a healthcheck stanza here and ignore the embedded health_check.sh altogether.
      - "/localfs/services/graylog/health_check2.sh:/health_check.sh:ro"
      
    environment:
      GRAYLOG_IS_MASTER: "true"
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/config/node-id"
      # must be the same as GRAYLOG_DATANODE_PASSWORD_SECRET
      # secret generated with pwgen -N 1 -s 96
      GRAYLOG_PASSWORD_SECRET: "h8wOr4JK24gT6PjqyopWxRoVAj3kttBqCazP9hGb28GhKI1Rxokg553VJOwdx3LKt35r4NcA0tMWIkDJ6qqZnwFrT4jjJiVK"
      #GRAYLOG_ROOT_PASSWORD_SHA2: "a51671220b8e5b7cd7ad3667149f3d2be4d749df059520dfd3d622b10dae745c  -"
      # you must remove the space space hyphen from the shasum output
      #GRAYLOG_ROOT_PASSWORD_SHA2: "a51671220b8e5b7cd7ad3667149f3d2be4d749df059520dfd3d622b10dae745c"
      # use this to get the root password hash:
      # echo -n "Enter Password: " && head -1 </dev/stdin | tr -d '\n' | sha256sum | cut -d" " -f1
      GRAYLOG_ROOT_PASSWORD_SHA2: "045928218d6d5a42f976163d70cdfe9226e9d1c3ea6bf1647ae1d8f44c2edc7d"
      GRAYLOG_HTTP_BIND_ADDRESS: 0.0.0.0:9000
      GRAYLOG_HTTP_EXTERNAL_URI: "https://stronk.run/graylog/"
      GRAYLOG_HTTP_PUBLISH_URI: "https://stronk.run/graylog/"
      # GRAYLOG_HTTP_ENABLE_TLS: "false"
      # GRAYLOG_HTTP_ENABLE_CORS: "true"
      # GRAYLOG_HTTP_PUBLISH_URI: "http://rhel-dev-01:9000/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://opensearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://graylog_mongodb:27017/graylog"
    deploy:
      replicas: 1 
      placement:
        constraints: [ node.labels.graylog_graylog == true ]
    # restart: "on-failure"